datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

model Product {
  id             String          @id @default(uuid())
  name           String
  stock          Int[]
  price          Float
  provider       String
  region         String
  sku            String          @unique
  publisher      String
  status         String
  promotionStart DateTime?
  promotionEnd   DateTime?
  updatedAt      DateTime        @updatedAt
  createdAt      DateTime        @default(now())
  salesOrders    SalesOrder[]    @relation(name: "ProductSales")
  pricing        Pricing?        @relation(name: "PricingToProduct")
  purchaseOrders PurchaseOrder[] @relation(name: "ProductPurchase")
  stockQty       StockQty?       @relation(name: "ProductToStockQty")
  packages       Package[]       @relation(name: "PackageToProduct")
}

// StockQty Model
model StockQty {
  id                        String           @id @default(uuid())
  generatedKeys             Int
  pendingKeysToGenerate     Int
  soldKeys                  Int
  soldKeysPendingGeneration Int
  product                   Product          @relation(name: "ProductToStockQty", fields: [productId], references: [id])
  productId                 String           @unique
  activationKeys            ActivationKeys[] @relation(name: "ActivationKeysToStockQty")
}

model Pricing {
  id                 String   @id @default(uuid())
  cost               Float
  promoPercent       Float
  srpPriceWithVAT    Float
  srpPriceWithoutVAT Float
  productId          String?  @unique
  product            Product? @relation(name: "PricingToProduct", fields: [productId], references: [id])
}

model SalesOrder {
  id              String          @id @default(uuid())
  productId       String
  salesVat        Float
  salesIncVat     Float
  salesExtVat     Float
  expectedCost    Float
  avgCost         Float
  processQuantity Int
  totalQuantity   Int
  salesCurrency   String
  totalPrice      Float
  startDate       DateTime
  endDate         DateTime
  status          String
  N_A             String
  confirmed       Boolean         @default(false)
  createdOn       DateTime        @default(now())
  product         Product         @relation(name: "ProductSales", fields: [productId], references: [id])
  packages        Package[]       @relation(name: "PackageToSalesOrder")
  purchaseOrders  PurchaseOrder[] @relation("SalesToPurchaseOrder") // Updated relation
}

model PurchaseOrder {
  id              String      @id @default(uuid())
  productId       String
  costIncVat      Float
  costExtVat      Float
  processQuantity Int
  totalQuantity   Int
  totalPrice      Float
  job             Int
  status          String
  region          String
  startDate       DateTime
  createdOn       DateTime    @default(now())
  salesOrderId    String? // New field to link a sales order
  salesOrder      SalesOrder? @relation("SalesToPurchaseOrder", fields: [salesOrderId], references: [id])
  product         Product     @relation(name: "ProductPurchase", fields: [productId], references: [id])
}

// BillingInformation Model
model BillingInformation {
  id              String @id @default(uuid())
  name            String
  email           String
  address         String
  zipcode         String
  city            String
  state           String
  countryCode     String
  region          String
  defaultCurrency String
}

// ActivationKeys Model
model ActivationKeys {
  id               String   @id @default(uuid())
  quantity         Int
  stockQtyId       String
  stockQty         StockQty @relation(name: "ActivationKeysToStockQty", fields: [stockQtyId], references: [id])
  pendingStocks    Int
  processingStocks Boolean
  totalKey         Int
}

// Package Model
model Package {
  id             String     @id @default(uuid())
  product        Product    @relation(name: "PackageToProduct", fields: [productId], references: [id])
  salesOrderId   String
  salesOrder     SalesOrder @relation(name: "PackageToSalesOrder", fields: [salesOrderId], references: [id])
  productId      String
  createdOn      DateTime   @default(now())
  startDate      DateTime
  orderDate      DateTime
  sent           Boolean
  A              Boolean
  C              Boolean
}

// BestSeller Model
model BestSeller {
  id        String   @id @default(uuid())
  name      String
  SKU       String
  soldCount Int
  createdOn DateTime @default(now())
}

// CustomerSalesReport Model
model CustomerSalesReport {
  id        String @id @default(uuid())
  name      String
  yesterday Float
  today     Float
  lastMonth Float
  thisMonth Float
  lastYear  Float
  allTime   Float
}

// ProviderPurchaseReport Model
model ProviderPurchaseReport {
  id                  String @id @default(uuid())
  name                String
  thisWeekIncPending  Float
  nextWeekPending     Float
  yesterday           Float
  todayIncPending     Float
  lastMonth           Float
  thisMonthIncPending Float
  lastYear            Float
}

// ProviderMonthlySalesReport Model
model ProviderMonthlySalesReport {
  id       String @id @default(uuid())
  month    Int
  nintendo Float
  nexway   Float
  epay     Float
  total    Float
}

// MonthlyPurchased Model
model MonthlyPurchased {
  id       String @id @default(uuid())
  month    Int
  nintendo Float
  nexway   Float
  epay     Float
  total    Float
}

// APILog Model
model APILog {
  id           String    @id @default(uuid()) // LogID as a unique identifier
  requestData  Json // Data sent to API, using Json type for flexibility
  responseData Json // Data received from API, also using Json type
  timestamp    DateTime  @default(now()) // Time of interaction
}

// CRMData Model
model CRMData {
  id               String   @id @default(uuid()) // CRMID as a unique identifier
  interactionNotes String? // Notes on customer interactions
  lastUpdated      DateTime @default(now()) @updatedAt // Timestamp for last update
}

// nintendoData Model

model NintendoData {
  id                                    String     @id @default(uuid())
  fs_id                                 String?    @unique
  change_date                           DateTime?
  url                                   String?
  type                                  String?
  dates_released_dts                    DateTime[]
  club_nintendo                         Boolean?
  pretty_date_s                         String?
  play_mode_tv_mode_b                   Boolean?
  play_mode_handheld_mode_b             Boolean?
  product_code_txt                      String[]
  image_url_sq_s                        String?
  deprioritise_b                        Boolean?
  demo_availability                     Boolean?
  pg_s                                  String?
  compatible_controller                 String[]
  originally_for_t                      String?
  paid_subscription_required_b          Boolean?
  cloud_saves_b                         Boolean?
  priority                              DateTime?
  digital_version_b                     Boolean?
  title_extras_txt                      String[]
  image_url_h2x1_s                      String?
  system_type                           String[]
  age_rating_sorting_i                  Int?
  game_categories_txt                   String[]
  play_mode_tabletop_mode_b             Boolean?
  publisher                             String
  product_code_ss                       String[]
  excerpt                               String
  nsuid_txt                             String[]
  date_from                             DateTime
  language_availability                 String[]
  price_has_discount_b                  Boolean?
  product_catalog_description_s         String?
  related_nsuids_txt                    String[]
  price_discount_percentage_f           Int?
  title                                 String?
  sorting_title                         String?
  wishlist_email_square_image_url_s     String?
  players_to                            Int?
  wishlist_email_banner640w_image_url_s String?
  paid_subscription_online_play_b       Boolean?
  playable_on_txt                       String[]
  hits_i                                Int?
  pretty_game_categories_txt            String[]
  title_master_s                        String?
  switch_game_voucher_b                 Boolean?
  game_category                         String[]
  system_names_txt                      String[]
  pretty_agerating_s                    String?
  price_regular_f                       Float?
  eshop_removed_b                       Boolean?
  age_rating_type                       String?
  price_sorting_f                       Float?
  price_lowest_f                        Float?
  age_rating_value                      String?
  physical_version_b                    Boolean?
  wishlist_email_banner460w_image_url_s String?
  downloads_rank_i                      Int?
  version                               String?
  region                                String
}

model Store {
  id           Int           @id @default(autoincrement())
  storeID      String        @unique
  transactions Transaction[]
}

model Transaction {
  id            Int           @id @default(autoincrement())
  transactionID String        @unique
  status        Int
  fulfillments  Fulfillment[]
  store         Store         @relation(fields: [storeId], references: [id])
  storeId       Int
}

model Fulfillment {
  id            Int         @id @default(autoincrement())
  sku           String
  status        Int
  qty           Int
  codes         Code[]
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
}

model Code {
  id             Int         @id @default(autoincrement())
  controlNumber  String
  downloadNumber String
  status         Int
  fulfillment    Fulfillment @relation(fields: [fulfillmentId], references: [id])
  fulfillmentId  Int
}

model EpayData {
  id    Int    @id @default(autoincrement())
  name  String
  price Float
  sku   String
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String
  // adminVerified           Boolean  @default(false)
  emailVerified           Boolean  @default(false)
  verificationCode        String?
  verificationCodeExpires DateTime?
  isTwoFactorEnabled Boolean?
  twoFactorSecret    String?
  tempSecret         String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
